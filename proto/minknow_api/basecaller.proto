syntax="proto3";

package minknow_api.basecaller;

option java_package = "com.nanoporetech.minknow_api";
option objc_class_prefix = "MKAPI";

import "minknow_api/analysis_configuration.proto";
import "minknow_api/protocol_settings.proto";

message StartBasecallingRequest {
    // User specified name to identify the basecall run.
    string name = 12;

    // Input directories to search for reads to be basecalled.
    //
    // Currently, only one directory can be specified, but this definition allows for multiple in
    // the future without breaking compatibility.
    repeated string input_reads_directories = 1;

    // Output directory where called reads will be placed.
    //
    // Reads will be sorted into subdirectories based on the sequencing run they came from.
    string output_reads_directory = 2;

    // The name of the basecalling configuration to use.
    string configuration = 3;

    // Enable output of .fast5 files containing original raw reads, event data/trace table from
    // basecall and basecall result sequence.
    //
    // This causes .fast5 files to be output in addition to FASTQ files.
    bool fast5_out = 4;

    // Enable gzip compression of output FASTQ files.
    bool compress_fastq = 5;

    // Prevent events / trace tables being written to .fast5 files.
    //
    // If event tables are not required for downstream processing (eg: for 1d^2) then it is more
    // efficient (and produces smaller files) to disable them.
    //
    // This has no effect if ``fast5_out`` is not enabled.
    bool disable_events = 6;

    // Recursively find fast5 files to basecall in the `input_reads_directories`.
    //
    // If False, only the fast5 files directly in one of the `input_reads_directories` will be
    // basecalled. If True, subdirectories of those directories will also be searched recursively.
    bool recursive = 7;

    // Options to control barcoding performed once basecalling reads is complete.
    // analysis_configuration.BarcodingConfiguration barcoding_configuration = 10;

    // // Options to control alignment performed once basecalling reads is complete.
    analysis_configuration.AlignmentConfiguration alignment_configuration = 11;
}

message StartBasecallingResponse {
    // An identifier for the basecalling run that was started. This can be used to monitor or cancel
    // the run.
    string id = 1;
}

message StartBarcodingRequest {
    // User specified name to identify the barcoding run.
    string name = 11;

    // Input directories to search for reads to be basecalled.
    //
    // Currently, only one directory can be specified, but this definition allows for multiple in
    // the future without breaking compatibility.
    repeated string input_reads_directories = 1;

    // Output directory where called reads will be placed.
    //
    // Reads will be sorted into subdirectories based on the sequencing run they came from.
    string output_reads_directory = 2;

    // Enable gzip compression of output FASTQ files.
    bool compress_fastq = 4;

    // Recursively find fast5 files to basecall in the `input_reads_directories`.
    //
    // If False, only the fast5 files directly in one of the `input_reads_directories` will be
    // basecalled. If True, subdirectories of those directories will also be searched recursively.
    bool recursive = 5;

    // Options to control barcoding performed once basecalling reads is complete.
    analysis_configuration.BarcodingConfiguration barcoding_configuration = 10;

}

message StartBarcodingResponse {
    // An identifier for the basecalling run that was started. This can be used to monitor or cancel
    // the run.
    string id = 1;
}

message StartAlignmentRequest {
    // User specified name to identify the alignment run.
    string name = 7;

    // Input directories to search for reads to be aligned.
    //
    // Currently, only one directory can be specified, but this definition allows for multiple in
    // the future without breaking compatibility.
    repeated string input_reads_directories = 1;

    // Output directory where aligned reads will be placed.
    string output_reads_directory = 2;

    // Recursively find fast5 files to align in the `input_reads_directories`.
    //
    // If False, only the fast5 files directly in one of the `input_reads_directories` will be
    // aligned. If True, subdirectories of those directories will also be searched recursively.
    bool recursive = 4;

    // Options to control alignment performed once basecalling reads is complete.
    analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
}

message StartAlignmentResponse {
    // An identifier for the alignment run that was started. This can be used to monitor or cancel
    // the run.
    string id = 1;
}

message StartPostProcessingProtocolRequest {
    // identifier value from a protocol returned from list_post_processing_protocols.
    string identifier = 1;

    // Optionally specify a sequencing protocol that is linked with this analysis.
    string sequencing_protocol_run_id = 7;

    // Input directories for the protocol (omit those which the protocol doesnt require).
    string input_fast5_directory = 2;
    string input_fastq_directory = 3;
    string input_bam_directory = 4;

    // Output directory where the analysed output should be written.
    string output_directory = 5;

    // Configured values for display settings for the protocol (see basecaller.list_settings_for_protocol)
    // keys missing from the original protocol will cause errors.
    map<string, protocol_settings.ProtocolSetting.ProtocolSettingValue> setting_values = 6;
}

message StartRequest {
    // Start request that will be used to trigger analysis, used to union over all the different types of analysis possible.
    oneof start_request {
        basecaller.StartBasecallingRequest start_basecalling_request = 2;
        basecaller.StartBarcodingRequest start_barcoding_request = 3;
        basecaller.StartAlignmentRequest start_alignment_request = 4;
        basecaller.StartPostProcessingProtocolRequest start_post_processing_protocol_request = 5;
    }
}