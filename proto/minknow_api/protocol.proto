syntax="proto3";

package minknow_api.protocol;

option java_package = "com.nanoporetech.minknow_api";
option objc_class_prefix = "MKAPI";

import "minknow_api/acquisition.proto";
import "minknow_api/basecaller.proto";
import "minknow_api/device.proto";
import "minknow_api/protocol_settings.proto";
import "minknow_api/rpc_options.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service ProtocolService {
    // Returns the name and run id of the currently running protocol.
    //
    // Will fail with FAILED_PRECONDITION if there is no protocol running
    //
    // Since 1.11
    rpc get_current_protocol_run (GetCurrentProtocolRunRequest) returns (ProtocolRunInfo) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

}

message BarcodeUserData {
    enum SampleType {
        // The barcode sample is a real sample being tested.
        test_sample = 0;

        // The barcode sample is a control which is expected to result in positive identification.
        positive_control = 1;

        // The barcode sample is a control which is expected to result in negative identification.
        negative_control = 2;

        // Indended to show that a result has not occured due to contamination.
        no_template_control = 3;

        // Separate positive controls for when kits expect 2.
        positive_control_1 = 4;

        // Separate positive controls for when kits expect 2.
        positive_control_2 = 5;
    }

    // Barcode name the user data applies to, eg: "barcode02"
    string barcode_name = 1;

    // Lamp barcode id the user data applies to, eg: "FIP04"
    string lamp_barcode_id = 2;

    // User defined string alias for the barcode.
    string alias = 3;

    // Sample type grouping for the barcode.
    SampleType type = 4;
}

message ProtocolRunUserInfo {
    // The group which the experiment should be held in.
    //
    // note: This value could be unset if a user did not specify a group_id when starting the protocol.
    google.protobuf.StringValue protocol_group_id = 1;

    // sample_id created by the user
    google.protobuf.StringValue sample_id = 2;

    // User supplied info for barcodes
    repeated BarcodeUserData barcode_user_info = 3;
}

message StartProtocolRequest {
    // The identifier of the protocol, as provided by list_protocols().
    string identifier = 1 [(rpc_required) = true];

    // The arguments to pass to the protocol.
    repeated string args = 2;

    // User input describing the protocol.
    ProtocolRunUserInfo user_info = 3;
}

message StartProtocolResponse {
    // UUID generated when the protocol is started, to uniquely represent this protocol instance
    string run_id = 1;
}

message StopProtocolRequest {
    // Specify how any running acquisition should
    // be handled when stopping the protocol.
    //
    // Protocol state will enter PROTOCOL_WAITING_FOR_ACQUISITION whilst any running
    // acquisition is finished.
    //
    // If a script ends on its own any analysis that was started is stopped, and it
    // is allowed to catchup. If the caller wants to end catchup they can call stop_protocol
    // to end catchup.
    //
    // Since 1.15
    acquisition.StopRequest.DataAction data_action_on_stop = 1;
}

message StopProtocolResponse {
}

message PauseProtocolRequest {
}
message PauseProtocolResponse {
}
message ResumeProtocolRequest {
}
message ResumeProtocolResponse {
}
message TriggerMuxScanRequest {
}
message TriggerMuxScanResponse {
}

message ListProtocolsRequest {
    // If this is false, then will try to use the cached value of the protocol list where possible
    // (still subject to changes in flow cell).
    // If this is true, then will force a reload of the protocol list
    //
    // Defaults to false
    bool force_reload = 1;
}

message ProtocolInfo {
    message TagValue {
        oneof tag_value {
            string string_value = 1;
            bool bool_value = 2;
            int64 int_value = 3;
            double double_value = 4;
            string array_value = 5;
            string object_value = 6;
        }
    }
    message TagExtractionResult {
        bool success = 1;
        string error_report = 2;
    }

    string identifier = 1;
    map<string,TagValue> tags = 2;
    string name = 3;
    TagExtractionResult tag_extraction_result = 4;
}

message ListProtocolsResponse {
    repeated ProtocolInfo protocols = 1;
}

message WaitForFinishedRequest {
    enum NotificationState {
        // Request return just after the protocol has temrinated, including any acquisition periods completing.
        NOTIFY_ON_TERMINATION = 0;

        // Request return prior to the script being termiated.
        // note: will try to return 5s before killing the protocol script.
        NOTIFY_BEFORE_TERMINATION = 1;

        // Notify as the protocol script finishes, not waiting for any in progress acquisition to complete.
        NOTIFY_ON_SCRIPT_TERMINATION = 2;
    };

    // Only consider a specific protocol run.
    string run_id = 1 [(rpc_required) = true];

    // Control what to wait for.
    //
    // Specifying NOTIFY_BEFORE_TERMINATION allows a caller to be notified the script will be ended _soon_,
    // and do final work to end cleanly.
    //
    // Since 1.11
    NotificationState state = 2;

    // Timeout to wait for finished, if the timeout expires before the protocol is complete (in the state requested)
    // then the response returns.
    //
    // By default the timeout will wait forever.
    //
    // Since 1.15
    float timeout = 3;
}

message GetRunInfoRequest {
    // The protocol run to get information about.
    string run_id = 1;
}

enum ProtocolState {
    // The protocol is still running.
    PROTOCOL_RUNNING = 0;

    // The protocol is waiting for the device to reach temperature
    //
    // Since 1.15
    PROTOCOL_WAITING_FOR_TEMPERATURE = 4;

    // Occurs when data protocol has stopped (either from a explicit rpc request or the script naturally ended)
    // and data is still being processed (albacore is still in catchup and processing reads).
    PROTOCOL_WAITING_FOR_ACQUISITION = 5;

    // The protocol finished on its own and did not report an error.
    //
    // This is determined by the protocol process exiting with a zero exit code.
    PROTOCOL_COMPLETED = 1;

    // The protocol was terminated by the user.
    PROTOCOL_STOPPED_BY_USER = 2;

    // The protocol finished on its own and reported an error.
    //
    // This is determined by the protocol process exiting with a non-zero exit code or because of a
    // signal. Often, this will be because an exception was raised in the Python code and not
    // caught, but could also indicate that the Python process crashed or was killed by some
    // mechanism other than by MinKNOW.
    PROTOCOL_FINISHED_WITH_ERROR = 3;

    // The protocol was terminated because the sequencing device encountered an error.
    PROTOCOL_FINISHED_WITH_DEVICE_ERROR = 6;

    // The protocol was terminated because MinKNOW could not send telemetry to start acquisition.
    PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY = 7;
}

enum ProtocolPhase {
    // The protocol has not reported what phase it is in.
    PHASE_UNKNOWN = 0;

    // The protocol is calibrating, or performing other initialisation tasks.
    PHASE_INITIALISING = 1;

    // The protocol is sequencing.
    PHASE_SEQUENCING = 2;

    // The protocol is setting up to perform a mux scan.
    PHASE_PREPARING_FOR_MUX_SCAN = 3;

    // The protocol is performing a mux scan. This checks whether to switch channels to different
    // wells (muxes) in order to improve and maintain sequencing performance.
    PHASE_MUX_SCAN = 4;

    // The protocol is paused.
    //
    // When the protocol is resumed, it is likely to enter the PHASE_RESUMING state before moving to
    // another state (such as PHASE_SEQUENCING).
    PHASE_PAUSED = 5;

    // The protocol is in the process of pausing.
    //
    // It should move into PHASE_PAUSED within a short time.
    PHASE_PAUSING = 6;

    // The protocol is in the process of resuming from a paused state.
    //
    // It should move into another phase, such as PHASE_SEQUENCING or PHASE_PREPARING_FOR_MUX_SCAN,
    // in a short time.
    PHASE_RESUMING = 7;
}

message Epi2meWorkflowReference {
    // The unique identifier for a workflow ( unique to a specific instance of epi2me )
    int64 id = 1;

    // URL that links to the workflow report. Syntax for a local workflow: file:// otherwise: http(s)://
    string url = 2;
}

message AssociatedPostProcessingAnalysis {
    // Id of analysis if this has been triggered (otherwise empty).
    string started_id = 1;

    // Start request for analysis
    basecaller.StartRequest start_request = 2;
}

message PlatformQcResult {
    // The flow cell id that the pqc was performed for
    string flow_cell_id = 1;

    // Whether the flow cell passed the platform qc check
    bool passed = 2;

    // Total number of pores that were found on the flow cell, across all muxes.
    uint32 total_pore_count = 3;
}

message ProtocolRunInfo {
    // The unique identifier assigned to this run.
    //
    // This is guaranteed to be made of ASCII characters, and at most 40 characters. It is globally
    // unique across all protocols runs on all MinKNOW instances.
    string run_id = 1;

    // The identifier of the protocol, as passed to start_protocol().
    string protocol_id = 2;

    // The arguments passed to start_protocol().
    repeated string args = 3;

    // Output location for protocol data (eg. reads).
    //
    // Since 1.16.
    string output_path = 11;

    // Indicates the current state of the protocol run.
    ProtocolState state = 4;

    // The phase of the protocol.
    //
    // This is the state reported by the protocol. If the protocol has not reported any state, it
    // will be PHASE_UNKNOWN. Completed protocols also report PHASE_UNKNOWN.
    //
    // Note that clients should handle unexpected values of this field gracefully. This can happen
    // if new phases are added but the client is still using an older version of the API
    // specification.
    //
    // Since 4.4.
    ProtocolPhase phase = 16;

    // The last time the phase changed.
    //
    // This can be used to determine how long the protocol has been in the current phase.
    //
    // NB: This will not be set if the phase is PHASE_UNKNOWN.
    //
    // Since 4.4.
    google.protobuf.Timestamp last_phase_change = 17;

    // Whether the protocol can be paused.
    //
    // Not all protocols can be paused, and cannot be paused in all phases.
    //
    // Note that if this is true and the phase is PHASE_PAUSING or PHASE_PAUSED, pausing will not
    // actually do anything.
    //
    // Since 4.4.
    bool can_pause = 18;

    // Whether a mux scan can be triggered for the protocol.
    //
    // Since 4.4.
    bool can_trigger_mux_scan = 19;

    // When the protocol was started (UTC).
    google.protobuf.Timestamp start_time = 5;

    // When the protocol script terminated (UTC).
    //
    // Unset if the protocol script is still running.
    //
    // Note that the protocol may still run until final acquisiton completes.
    google.protobuf.Timestamp script_end_time = 9;

    // When the protocol terminated (UTC), indicating both the
    // protocol script and the final acquisition were completed.
    //
    // Unset if the protocol is still running.
    google.protobuf.Timestamp end_time = 6;

    // A list of acquisition periods started whilst this protocol was running.
    //
    repeated string acquisition_run_ids = 7;

    // User specified information associated with the protocol at start time.
    //
    // Since 1.11.
    ProtocolRunUserInfo user_info = 8;

    // List of workflows from epi2me associated with this protocol
    //
    // Since 1.15.
    repeated Epi2meWorkflowReference epi2me_workflows = 10;

    // Information about the device a protocol was started with
    //
    // Since 3.4
    device.GetDeviceInfoResponse device = 12;

    // Information about the flow cell a protocol was started with
    //
    // Since 3.4
    device.GetFlowCellInfoResponse flow_cell = 13;

    // Meta-info about the protocol
    //
    // Since 3.8
    ProtocolInfo meta_info = 14;

    // List of scheduled post processing analysis tasks
    repeated AssociatedPostProcessingAnalysis associated_post_processing_analysis = 15;

    // Platform QC result. Set by bream by calling `set_platform_qc_result()`. 
    // Possible to not be set (e.g. not a pqc run)
    PlatformQcResult pqc_result = 20;

}

message FilteringInfo {
    // Intialising this message a filter like `pqc_filter` will imply to restrict results to
    // that type only.
    // 
    // Each filter type should also be using wrapper types for each individual value, to
    // allow for specific filtering within each type

    message PlatformQcFilter {
        optional string flow_cell_id = 1;
    }

    PlatformQcFilter pqc_filter = 1;
    
}

message ListProtocolRunsRequest {
    FilteringInfo filter_info = 1;
}

message ListProtocolRunsResponse {
    repeated string run_ids = 1;
}
message GetCurrentProtocolRunRequest {

}

message GetCurrentProtocolRunResponse {
    ProtocolRunInfo run_info = 3;
}

message WatchCurrentProtocolRunRequest {

}

message GetContextInfoRequest {

}

message GetContextInfoResponse {
    map<string, string> context_info = 1;
}

message SetContextInfoRequest {
    map<string, string> context_info = 1;
}

message SetContextInfoResponse {

}

message GetProtocolPurposeRequest {

}

message GetProtocolPurposeResponse {
    string purpose = 1;
}

message SetProtocolPurposeRequest {
    string purpose = 1;
}

message SetProtocolPurposeResponse {

}

message AddEpi2meWorkflowRequest {
    string run_id = 1 [(rpc_required) = true];

    Epi2meWorkflowReference epi2me_workflow = 2 [(rpc_required) = true];
}

message AddEpi2meWorkflowResponse {
}

message ListProtocolGroupIdsRequest {
}

message ListProtocolGroupIdsResponse {
    // A list of protocol group ids used in any
    // protocol started on this instance of minknow.
    //
    repeated string protocol_group_ids = 1;
}

message BeginHardwareCheckRequest {}

message BeginHardwareCheckResponse {
    // UUID generated when the protocol is started, to uniquely represent this protocol instance
    string run_id = 1;
}

message BeginPlatformQcRequest {

}

message BeginPlatformQcResponse {
    // UUID generated when the protocol is started, to uniquely represent this protocol instance
    string run_id = 1;
}

message SetPlatformQcResultRequest {
    // The protocol_run_id that was given when the pqc run was started
    string protocol_run_id = 1;

    PlatformQcResult pqc_result = 2;
}

message SetPlatformQcResultResponse {

}

message ProtocolIdentifierComponents {
    enum Location {
        ANY = 0;
        SYSTEM_SCRIPTS = 1;
        USER_SCRIPTS = 2;
    };
    // If not specified, will default to "ANY"
    Location location = 1;
    // one of "custom", "sequencing", "control", "ctc", "platform qc" or "flowcell_plugin"
    string experiment_type = 2;
    // Name (or path) of the protocol, without the .toml extension eg: "sequencing/sequencing_MIN106_DNA" this is relative to the
    // system or user protocol directory
    string name = 3;
    // eg: "FLO-MIN106"
    string flow_cell_product_code = 4;
    // eg: "SQK-RPB004"
    string kit = 5;
}


message ListSettingsForProtocolRequest {
    oneof protocol_identifier {
        // specify the protocol with a string containing all the protocol's identifying components, eg:
        // "sequencing/sequencing_MIN106_DNA:FLO-MIN106:SQK-RPB004"
        string identifier = 1;

        // specify the protocol providing the identifying components individually. All components are optional, if more
        // than one protocol matches given strings, information about the first will be returned.
        ProtocolIdentifierComponents components = 2;
    }
}

message ListSettingsForProtocolResponse {
    // Run options
    message RunOptions {
        protocol_settings.ProtocolSetting run_length = 1;
        protocol_settings.ProtocolSetting bias_voltage = 2;
        protocol_settings.ProtocolSetting read_until_enabled = 3;
        protocol_settings.ProtocolSetting read_until_ref_file = 4;
        protocol_settings.ProtocolSetting read_until_channels = 5;
        protocol_settings.ProtocolSetting read_until_bed_file_enabled = 6;
        protocol_settings.ProtocolSetting read_until_bed_file = 7;
        protocol_settings.ProtocolSetting read_until_enrichment = 8;
        protocol_settings.ProtocolSetting active_channel_selection = 9; // bool
        protocol_settings.ProtocolSetting mux_scan_period = 10; // in hours
        protocol_settings.ProtocolSetting group_change_period = 11;
    }

    message Basecalling {
        protocol_settings.ProtocolSetting basecalling_enabled = 1;
        protocol_settings.ProtocolSetting barcoding_enabled = 2;
        protocol_settings.ProtocolSetting basecall_model = 3;
        protocol_settings.ProtocolSetting trim_barcodes_enabled = 4;
        protocol_settings.ProtocolSetting require_barcodes_both_ends = 5;
        protocol_settings.ProtocolSetting detect_mid_strand_barcodes = 6;
        protocol_settings.ProtocolSetting override_mid_barcoding_score = 7;
        protocol_settings.ProtocolSetting override_rear_barcoding_score = 8;
        protocol_settings.ProtocolSetting min_barcoding_score = 9;
        protocol_settings.ProtocolSetting min_barcoding_score_rear = 10;
        protocol_settings.ProtocolSetting min_barcoding_score_mid = 11;
        protocol_settings.ProtocolSetting alignment_enabled = 12;
        protocol_settings.ProtocolSetting alignment_ref_file = 13;
        protocol_settings.ProtocolSetting alignment_bed_file_enabled = 14;
        protocol_settings.ProtocolSetting alignment_bed_file = 15;
    }

    // Output
    message Output {
        protocol_settings.ProtocolSetting output_location = 1;
        protocol_settings.ProtocolSetting fast_q_enabled = 2;
        protocol_settings.ProtocolSetting fast_q_reads_per_file = 3;
        protocol_settings.ProtocolSetting fast_q_data_compression = 4;
        protocol_settings.ProtocolSetting fast_5_enabled = 5;
        protocol_settings.ProtocolSetting fast_5_reads_per_file = 6;
        protocol_settings.ProtocolSetting fast_5_data_trace_table = 7;
        protocol_settings.ProtocolSetting fast_5_data_move_table = 8;
        protocol_settings.ProtocolSetting fast_5_data_fast_q = 9;
        protocol_settings.ProtocolSetting fast_5_data_raw = 10;
        protocol_settings.ProtocolSetting fast_5_data_compression = 11;
        protocol_settings.ProtocolSetting bam_enabled = 12;
        protocol_settings.ProtocolSetting read_filtering_enabled = 13;
        protocol_settings.ProtocolSetting read_filtering_min_qscore = 14;
        protocol_settings.ProtocolSetting read_filtering_min_read_length = 15;
        protocol_settings.ProtocolSetting read_filtering_max_read_length = 16;
        protocol_settings.ProtocolSetting bulk_file_enabled = 17;
        protocol_settings.ProtocolSetting bulk_file_raw = 18;
        protocol_settings.ProtocolSetting bulk_file_events = 19;
        protocol_settings.ProtocolSetting bulk_file_read_table = 20;
        protocol_settings.ProtocolSetting bulk_file_raw_enabled = 21;
        protocol_settings.ProtocolSetting bulk_file_events_enabled = 22;
        protocol_settings.ProtocolSetting bulk_file_read_table_enabled = 23;
    }

    ProtocolIdentifierComponents protocol = 1;

    RunOptions run_options = 2;
    Basecalling basecalling = 3;
    Output output = 4;

    // Any protocol settings not covered by the above structures, for example
    // those required for custom-scripts.
    repeated protocol_settings.ProtocolSetting protocol_settings = 5;
}

message AssociatePostProcessingAnalysisRequest {
    // Protocol id to associate analysis with:
    string run_id = 1;

    basecaller.StartRequest start_request = 2;
}

message AssociatePostProcessingAnalysisResponse {
    // Id of the basecaller.proto post processing task that was triggered, if the post processing analysis was executed immediately (protocol was finished).
    string id = 1;
}

message ClearProtocolHistoryDataRequest {
    repeated string protocol_ids = 1;
}

message ClearProtocolHistoryDataResponse {}

enum Action {
    // No action is requested.
    ACTION_NONE = 0;
    // The protocol should pause.
    //
    // This will only be sent if the can_pause capability has been set to true by a request
    // in the current call to protocol_phase_management().
    //
    // If the protocol is already pausing or paused, this message should be ignored.
    // Otherwise, the protocol should immediately respond with a ProtocolPhaseManagementRequest
    // that sets the phase to PHASE_PAUSING or PHASE_PAUSED.
    ACTION_PAUSE = 1;
    // The protocol should resume.
    //
    // This will only be sent if the can_pause capability has been set to true by a request
    // in the current call to protocol_phase_management().
    //
    // If the protocol is not pausing or paused, this message should be ignored.
    // Otherwise, the protocol should immediately respond with a ProtocolPhaseManagementRequest
    // that sets the phase appropriated (eg: to PHASE_RESUMING).
    ACTION_RESUME = 2;
    // The protocol should trigger a mux scan.
    //
    // This will only be sent if the can_trigger_mux_scan capability has been set to true by a
    // request in the current call to protocol_phase_management().
    //
    // If the protocol is already performing (or preparing for) a mux scan, this message should be
    // ignored. Otherwise, the protocol should immediately respond with a
    // ProtocolPhaseManagementRequest that sets the phase to PHASE_PREPARING_FOR_MUX_SCAN or
    // PHASE_MUX_SCAN.
    ACTION_TRIGGER_MUX_SCAN = 3;
}

message ProtocolPhaseManagementRequest {
    message Capabilities {
        // Indicate that the protocol will respond to pause and resume requests.
        bool can_pause = 1;
        // Indicate that the protocol will respond to mux scan requests.
        bool can_trigger_mux_scan = 2;
    }
    // Update the set of capabilities (messages that will be responded to by the protocol).
    Capabilities set_capabilities = 1;

    // Update the protocol phase.
    //
    // Leave empty (ie: PHASE_UNKNOWN) to keep the previous phase.
    ProtocolPhase phase = 2;
}

message ProtocolPhaseManagementResponse {
    // Requests that the protocol changes phase.
    //
    // The client should never receive an action type (other than possibly ACTION_NONE) that it has
    // not explicitly opted into via the `ProtocolPhaseManagementRequest.set_capabilities` field.
    //
    // If this is set to ACTION_NONE, the message should be ignored (this is for future
    // compatibility).
    Action action = 1;
}
